@page "/route/{BoolParam:bool}"
@page "/route/{BoolParam:int}"
@page "/route/{BoolParam:int}/{DatetimeParam:datetime}"
@page "/route/{DatetimeParam:datetime}"
@page "/route/{DecimalParam:decimal}"
@page "/route/{DoubleParam:double}"
@page "/route/{FloatParam:float}"
@page "/route/{GuidParam:guid}"
@page "/route/{IntParam:int}"
@page "/route/{LongParam:long}"
@page "/route/{StringParam:string}"
@page "/route/{OptionalStringParam:string?}"
@page "/route/{CompliantBoolParam:bool}"
@page "/route/{CompliantDatetimeParam:datetime}"
@page "/route/{CompliantDecimalParam:decimal}"
@page "/route/{CompliantDoubleParam:double}"
@page "/route/{CompliantFloatParam:float}"
@page "/route/{CompliantGuidParam:guid}"
@page "/route/{CompliantIntParam:int}"
@page "/route/{CompliantLongParam:long}"
@page "/route/{CompliantStringParam:string}"
@page "/route/{OptionalCompliantStringParam:string?}"
@page "/route/{InvalidConstraint:invalid}"

@code {
    [Parameter]
    public string BoolParam { get; set; } // Noncompliant {{Parameter type 'string' does not match route parameter type constraint 'bool' in route '/route/{BoolParam:bool}'.}}
    //     ^^^^^^
                                          // Noncompliant@-2 {{Parameter type 'string' does not match route parameter type constraint 'int' in route '/route/{BoolParam:int}'.}}
                                          // Noncompliant@-3 {{Parameter type 'string' does not match route parameter type constraint 'int' in route '/route/{BoolParam:int}/{DatetimeParam:datetime}'.}}
    [Parameter]
    public decimal DatetimeParam { get; set; } // Noncompliant {{Parameter type 'decimal' does not match route parameter type constraint 'datetime' in route '/route/{BoolParam:int}/{DatetimeParam:datetime}'.}}
                                               // Noncompliant@-1 {{Parameter type 'decimal' does not match route parameter type constraint 'datetime' in route '/route/{DatetimeParam:datetime}'.}}
    [Parameter]
    public bool DecimalParam { get; set; } // Noncompliant {{Parameter type 'bool' does not match route parameter type constraint 'decimal' in route '/route/{DecimalParam:decimal}'.}}
    [Parameter]
    public DateTime DoubleParam { get; set; } // Noncompliant {{Parameter type 'DateTime' does not match route parameter type constraint 'double' in route '/route/{DoubleParam:double}'.}}
    [Parameter]
    public Guid FloatParam { get; set; } // Noncompliant {{Parameter type 'Guid' does not match route parameter type constraint 'float' in route '/route/{FloatParam:float}'.}}
    [Parameter]
    public string GuidParam { get; set; } // Noncompliant {{Parameter type 'string' does not match route parameter type constraint 'guid' in route '/route/{GuidParam:guid}'.}}
    [Parameter]
    public long IntParam { get; set; } // Noncompliant {{Parameter type 'long' does not match route parameter type constraint 'int' in route '/route/{IntParam:int}'.}}
    [Parameter]
    public int LongParam { get; set; } // Noncompliant {{Parameter type 'int' does not match route parameter type constraint 'long' in route '/route/{LongParam:long}'.}}
    [Parameter]
    public float StringParam { get; set; } // Noncompliant {{Parameter type 'float' does not match route parameter type constraint 'string' in route '/route/{StringParam:string}'.}}
    [Parameter]
    public float OptionalStringParam { get; set; } // Noncompliant {{Parameter type 'float' does not match route parameter type constraint 'string' in route '/route/{OptionalStringParam:string?}'.}}

    [Parameter]
    public bool CompliantBoolParam { get; set; } // Compliant
    [Parameter]
    public DateTime CompliantDatetimeParam { get; set; } // Compliant
    [Parameter]
    public decimal CompliantDecimalParam { get; set; } // Compliant
    [Parameter]
    public double CompliantDoubleParam { get; set; } // Compliant
    [Parameter]
    public float CompliantFloatParam { get; set; } // Compliant
    [Parameter]
    public Guid CompliantGuidParam { get; set; } // Compliant
    [Parameter]
    public int CompliantIntParam { get; set; } // Compliant
    [Parameter]
    public long CompliantLongParam { get; set; } // Compliant
    [Parameter]
    public string CompliantStringParam { get; set; } // Compliant
    [Parameter]
    public string OptionalCompliantStringParam { get; set; } // Compliant
    [Parameter]
    public string InvalidConstraint { get; set; } // Compliant
}