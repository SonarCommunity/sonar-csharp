@using Damselfly.Core.ScopedServices
@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject ViewDataService ViewDataService
@inject AuthenticationStateProvider authProvider
@inject IConfigService configService
@inject IUserMgmtService userService
@inject IJSRuntime jsRuntime
@inject ApplicationStateService appStatusService

@implements IDisposable

<MudDialogProvider FullWidth="true" MaxWidth="MaxWidth.Small" />
<RadzenContextMenu />

<DetailedErrorBoundary>
    <ChildContent>
        <CascadingAuthenticationState>
            <DetailedErrorBoundary>
                <ThemeSwitcher />
            </DetailedErrorBoundary>
            @if (WaitingForAuth)
            {
                <p>Checking Login Status...</p>
            }
            else
            {
                @if (ShowLogin)
                {
                    <Login />
                }
                else
                {
                    <div class="damselfly-container">
                        <div class="damselfly-application">
                            @if (appStatusService.IsMobile)
                            {
                                @Body
                                <SideBar />
                            }
                            else
                            {
                                <SplitView>
                                    <LeftPane>
                                        <SideBar />
                                    </LeftPane>
                                    <RightPane>
                                        @Body
                                    </RightPane>
                                </SplitView>
                            }
                        </div>
                        <DetailedErrorBoundary>
                            <Statusbar />
                        </DetailedErrorBoundary>
                    </div>
                }
            }
        </CascadingAuthenticationState>
    </ChildContent>
    <ErrorContent>
        <p>An error occurred. Please check the Damselfly logs and reload the page.</p>
    </ErrorContent>
</DetailedErrorBoundary>

@code
{
    bool ShowLogin = false;
    bool WaitingForAuth = false;

    private async void AuthStateChanged(Task<AuthenticationState> authStateTask)
    {
        var authState = await authStateTask;

        if( authState != null )
        { 
            ShowLogin = ! authState.User.Identity.IsAuthenticated;

            StateHasChanged();
        }
    }

    public void Dispose()
    {
        authProvider.AuthenticationStateChanged -= AuthStateChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            int innerWidth = await jsRuntime.InvokeAsync<int>("getInnerWidth");

            appStatusService.IsMobile = (innerWidth <= 480);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        authProvider.AuthenticationStateChanged += AuthStateChanged;

        var forceLogin = configService.GetBool(ConfigSettings.ForceLogin);

        if (forceLogin)
        {
            WaitingForAuth = true;

            var authState = await authProvider.GetAuthenticationStateAsync();

            var user = authState.User;

            if (!user.Identity.IsAuthenticated)
            {
                // Check if any users have been created. If there aren't any, then we need to allow
                // the user to create the first one, so disable the login redirect.
                var users = await userService.GetUsers();

                if (users.Any())
                {
                    ShowLogin = true;
                }
            }

            WaitingForAuth = false;
        }
    }
}