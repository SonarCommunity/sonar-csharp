/*
 * SonarAnalyzer for .NET
 * Copyright (C) 2015-2022 SonarSource SA
 * mailto: contact AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json.Linq;

namespace SonarAnalyzer.SourceGenerator
{
    [Generator]
    public class RuleCatalogGenerator : ISourceGenerator
    {
        private const string SonarWayFileName = "Sonar_way_profile.json";

        public void Initialize(GeneratorInitializationContext context)
        {
            // Not needed
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (!context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.projectdir", out var projectDir))
            {
                throw new NotSupportedException("Cannot find ProjectDir");
            }
            var language = context.Compilation.Language switch
            {
                LanguageNames.CSharp => "cs",
                LanguageNames.VisualBasic => "vbnet",
                _ => throw new ArgumentException($"Unexpected language: {context.Compilation.Language}")
            };
            context.AddSource("RuleCatalog", GenerateSource(RuleDescriptorArguments(Path.Combine(projectDir, "..", "..", "rspec", language))));
        }

        private static IEnumerable<string[]> RuleDescriptorArguments(string rspecDirectory)
        {
            var sonarWay = new HashSet<string>(JObject.Parse(File.ReadAllText(Path.Combine(rspecDirectory, SonarWayFileName)))["ruleKeys"].Values<string>());
            foreach (var jsonPath in Directory.GetFiles(rspecDirectory, "*.json").Where(x => Path.GetFileName(x) != SonarWayFileName))
            {
                var json = JObject.Parse(File.ReadAllText(jsonPath));
                var id = Path.GetFileName(jsonPath).Split('_').First();
                yield return new[]
                {
                    Encode(id),
                    Encode(json.Value<string>("title")),
                    Encode(json.Value<string>("type")),
                    Encode(json.Value<string>("defaultSeverity")),
                    $"SourceScope.{json.Value<string>("scope")}",
                    sonarWay.Contains(id).ToString().ToLower(),
                    Encode(File.ReadAllText(Path.ChangeExtension(jsonPath, ".html")))
                };
            }
        }

        private static string GenerateSource(IEnumerable<string[]> rules)
        {
            var sb = new StringBuilder();
            sb.AppendLine(
        @"// <auto-generated/>

using System.Collections.Generic;

namespace SonarAnalyzer.Helpers
{
    internal static class RuleCatalog
    {
        public static Dictionary<string, RuleDescriptor> Rules { get; } = new()
        {");
            foreach (var arguments in rules)
            {
                sb.AppendLine($@"{{ {arguments[0]}, new({string.Join(", ", arguments)}) }},");
            }
            sb.AppendLine(
@"      };
    }
}");
            return sb.ToString();
        }

        private static string Encode(string value) =>
            $@"@""{value.Replace(@"""", @"""""")}""";
    }
}
