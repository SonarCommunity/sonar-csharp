# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: 'sonaranalyzer-dotnet/SonarAnalyzer.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  MSBUILD_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\msbuild.exe'

stages:
  - stage: dotnetBuildStage
    displayName: '.Net build'

    jobs:
    - job: dotnetBuildjob
      displayName: 'Build and package'
      steps:
      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - task: Cache@2
        displayName: Cache NuGet packages
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
          restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
          path: $(NUGET_PACKAGES)

      - task: NuGetCommand@2
        displayName: "Restore NuGet packages"
        inputs:
          restoreSolution: '$(solution)'

      - powershell: |
          # Calculate the file path
          $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
          Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."

          # Read the version from the file
          [xml]$versionProps = Get-Content "$versionFilePath"
          $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
          Write-Host "Sonar project version is '${sonarProjectVersion}'"

          # Set the variable to it can be used by other tasks
          Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;]$sonarProjectVersion"
        displayName: 'Read Sonar project version from the versions.props file'

      - task: VSBuild@1
        displayName: 'Set BranchName, Sha1 and BuildNumber properties from Azure pipeline variables'
        inputs:
          solution: scripts/version/ChangeVersion.proj
          msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId) /p:BuildConfiguration=$(BuildConfiguration)'

      - task: DownloadSecureFile@1
        displayName: 'Download snk file'
        name: snk
        inputs:
          secureFile: SonarSourceSecret.snk

      - task: DownloadSecureFile@1
        displayName: 'Download pfx file'
        inputs:
          secureFile: 'sonarsource-2019-2021.pfx'

      - task: SonarCloudPrepare@1
        condition: false
        displayName: 'Run Code Analysis - Begin Step'
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'MSBuild'
          projectKey: 'sonaranalyzer-dotnet'
          projectName: 'SonarAnalyzer .Net'
          projectVersion: '$(SONAR_PROJECT_VERSION)'
          extraProperties: 

      - task: VSBuild@1
        displayName: "Build SonarAnalyzer"
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          msbuildArgs: '/p:DeployExtension=false /p:SignAssembly=true /p:DefineConstants=SignAssembly /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)" /p:pfxCertificatePath="$(pfx.secureFilePath)" /p:pfxPassword="$(pfxPassword)" /p:pfxSha1=$(pfxSha1) /p:Sha1=$(Build.SourceVersion) /p:BuildNumber=$(Build.BuildId)'

      - task: CopyFiles@2
        condition: true
        displayName: 'Copy build binaries to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: 'sonaranalyzer-dotnet/its/binaries/*.dll'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/binaries'

      - task: PublishPipelineArtifact@1
        inputs:
          path: sonaranalyzer-dotnet/its/binaries/
          artifact: Binaries

      - task: PublishBuildArtifacts@1
        condition: false
        inputs:
          pathToPublish: 'sonaranalyzer-dotnet/its/binaries/*.dll'
          artifactName: Binaries

      - task: VSTest@2
        condition: false
        displayName: "Run SonarAnalyzer unit tests"
        inputs:
          testAssemblyVer2: |
            **\$(BuildConfiguration)\**\*.UnitTest.dll
            !**\obj\**
          runInParallel: true
          runTestsInIsolation: true
          codeCoverageEnabled: true
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          rerunFailedTests: false

      - task: SonarCloudAnalyze@1
        condition: false
        displayName: 'Run Code Analysis - End Step'

      - task: SonarCloudPublish@1
        condition: false
        displayName: 'Run Code Analysis - Publish QG'
        inputs:
          pollingTimeoutSec: '300'

      - task: NuGetCommand@2
        condition: false
        displayName: "Build NuGet packages"
        inputs:
          command: pack
          packagesToPack: 'sonaranalyzer-dotnet/src/**/*.nuspec'
          configuration: '$(BuildConfiguration)'
          packDestination: '$(Build.ArtifactStagingDirectory)'
          verbosityPack: 'Detailed'
          publishPackageMetadata: true

      - task: CopyFiles@2
        condition: false
        displayName: 'Copy NuGet packages to: $(Build.ArtifactStagingDirectory)'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '*.nupkg'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'

      - task: PublishBuildArtifacts@1
        condition: false
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: BuildOutput

  - stage: runIntegrationTestsStage
    displayName: 'Run .Net integration tests'
    jobs:
    - job: runIntegrationTestsJob
      steps:
      - task: PowerShell@2
        inputs:
          targetType: 'inline'
          script: |
            dir $(Build.ArtifactStagingDirectory)
            dir $(Build.ArtifactStagingDirectory)/binaries

      - task: PowerShell@2
        condition: true
        displayName: 'Run integration tests'
        inputs:
          filePath: 'sonaranalyzer-dotnet/its/regression-test.ps1'
          workingDirectory: 'sonaranalyzer-dotnet/its'
