trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  - group: sonar-dotnet-variables
  - group: sonarsource-build-variables

resources:
  repositories:
    - repository: commonTemplates
      type: git
      name: pipelines-yaml-templates
      ref:  refs/tags/v1.0.6

stages:
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'build'
    burgrType: 'build'
    stageName: 'build'
    stageDisplayName: 'Build the dotnet analyzers and stage to repox'
    jobs:
    - job: dotnetBuildjob
      displayName: 'Build and package'

      steps:
      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - task: Cache@2
        displayName: Cache NuGet packages
        inputs:
          key: 'nuget | "$(Agent.OS)" | **/packages.lock.json'
          restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
          path: $(NUGET_PACKAGES)

      - task: NuGetCommand@2
        displayName: "Restore NuGet packages"
        inputs:
          restoreSolution: '$(solution)'

      - powershell: |
          # Calculate the file path
          $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
          Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."

          # Read the version from the file
          [xml]$versionProps = Get-Content "$versionFilePath"
          $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
          Write-Host "Sonar project version is '${sonarProjectVersion}'"

          # Set the variable to it can be used by other tasks
          Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;]$sonarProjectVersion"
        displayName: 'Read Sonar project version from the versions.props file'

      - task: VSBuild@1
        displayName: 'Set BranchName, Sha1 and BuildNumber'
        inputs:
          solution: scripts/version/ChangeVersion.proj
          msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId) /p:BuildConfiguration=$(BuildConfiguration)'

      - task: DownloadSecureFile@1
        displayName: 'Download snk file'
        name: snk
        inputs:
          secureFile: SonarSourceSecret.snk

      - task: DownloadSecureFile@1
        displayName: 'Download pfx file'
        inputs:
          secureFile: 'sonarsource-2019-2021.pfx'

      - task: VSBuild@1
        displayName: "Build SonarAnalyzer solution"
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          msbuildArgs: '/p:DeployExtension=false /p:SignAssembly=true /p:DefineConstants=SignAssembly /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)" /p:pfxCertificatePath="$(pfx.secureFilePath)" /p:pfxPassword="$(pfxPassword)" /p:pfxSha1=$(pfxSha1) /p:Sha1=$(Build.SourceVersion) /p:BuildNumber=$(Build.BuildId) /p:WarningLevel=0'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish analyzer binaries as pipeline artifact'
        inputs:
          path: sonaranalyzer-dotnet/its/binaries/
          artifact: Binaries

      - task: PublishPipelineArtifact@1
        displayName: 'Publish rule descriptor binaries as pipeline artifact'
        inputs:
          path: sonaranalyzer-dotnet\src\SonarAnalyzer.RuleDescriptorGenerator\bin
          artifact: RuleDescriptorBin

      - task: NuGetCommand@2
        displayName: "Build NuGet packages"
        inputs:
          command: pack
          packagesToPack: 'sonaranalyzer-dotnet/src/**/*.nuspec'
          configuration: '$(BuildConfiguration)'
          packDestination: '$(Build.ArtifactStagingDirectory)/packages'
          verbosityPack: 'Detailed'
          publishPackageMetadata: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish NuGet packages as build artifacts'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/packages'
          artifactName: 'NuGet Packages'

      - task: ArtifactoryNuGet@1
        displayName: 'Publish SonarAnalyzer.CFG.CSharp NuGet on repox'
        inputs:
          command: 'push'
          artifactoryService: 'Repox artifactory'
          targetDeployRepo: 'sonarsource-nuget-qa'
          pathToNupkg: '$(Build.ArtifactStagingDirectory)/packages/SonarAnalyzer.CFG.CSharp.*.nupkg'

- stage: promoteNugets
  displayName: Promote NuGet on repox
  dependsOn: build
  condition: succeeded()
  jobs:
    - job: promoteRepox
      displayName: 'Promote SonarAnalyzer.CFG.CSharp NuGet on repox'
      steps:
        - powershell: |
            # Calculate the file path
            $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
            Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."

            # Read the version from the file
            [xml]$versionProps = Get-Content "$versionFilePath"
            $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
            Write-Host "Sonar project version is '${sonarProjectVersion}'"

            # Set the variable to it can be used by other tasks
            Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;]$sonarProjectVersion"
          displayName: 'Read Sonar project version from the versions.props file'

        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
        
        - bash: pip3 install requests

        - task: PythonScript@0
          name: promoteRepox
          inputs:
            failOnStderr: true
            scriptSource: 'inline'
            script: |
              import requests
              import os
              import sys
              
              version = '$(SONAR_PROJECT_VERSION).$(Build.BuildId)'
              isPr = '$(Build.Reason)' == 'PullRequest'
              sourceRepo = 'sonarsource-nuget-qa' # todo os.environ['ARTIFACTORY_NUGET_REPO']
              targetRepo = None
              if isPr:
                targetRepo = sourceRepo.replace('qa', 'dev')
              else:
                targetRepo = sourceRepo.replace('qa', 'public')
              
              artifact = f'SonarAnalyzer.CSharp.{version}.nupkg'
              status = 'passed'
              print(f'Promoting nuget {artifact} from {sourceRepo} to {targetRepo}')
              
              # todo copy or move mode
              url = f'$(ARTIFACTORY_URL)/api/move/{sourceRepo}/{artifact}?to=/{targetRepo}/{artifact}'
              print(f'URL: {url}')
              headers = {'Content-Type': 'application/json'}
              response = requests.post(url, headers=headers, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))
              
              promoted = response.status_code == 200
              if not promoted:
                print('[!] [{0}] Server Error'.format(response.status_code), file=sys.stderr)

- template: promote-stage.yml@commonTemplates
  parameters:
    stageDependencies:
    - qa
