schedules:
# Run from Monday to Friday at 5:30 UTC (https://docs.microsoft.com/en-us/azure/devops/pipelines/process/scheduled-triggers?view=azure-devops&tabs=yaml#cron-syntax)
- cron: "30 5 * * 1-5"
  displayName: Daily build
  branches:
    include:
    - master
  always: true

trigger:
- master

pool: '.Net Bubble - GCP'

variables:
  - group: sonar-dotnet-variables
  - group: sonarsource-build-variables
  # To make sure we don`t use MsBuild 17.
  - name: MsBuildPath
    value: 'C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\MSBuild.exe'
  - name: UnitTestProjectPath
    value: 'analyzers\tests\SonarAnalyzer.UnitTest\'
  - name: UnitTestResultsPath
    value: '$(UnitTestProjectPath)\TestResults'
  - name: isReleaseBranch
    value: ${{ or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/branch-')) }}
  - name: vsVersion
    value: '17.0'

resources:
  repositories:
    - repository: pipelines-yaml-templates
      type: git
      name: pipelines-yaml-templates
      ref:  refs/tags/v1.0.13

stages:
- template: stage-with-burgr-notifications.yml@pipelines-yaml-templates
  parameters:
    burgrName: 'build'
    burgrType: 'build'
    stageName: 'build'
    # Build the dotnet analyzers and stage to repox
    stageDisplayName: 'Build:'
    jobs:
    - job: dotnetBuildjob
      displayName: 'Build and package'
      workspace:
        clean: all

      steps:
      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - script: '"${{ variables.MsBuildPath }}" /t:restore /p:RestoreLockedMode=true /p:RestoreConfigFile="analyzers\NuGet.Config" $(solution)'
        displayName: "NuGet Restore"

      - powershell: .\scripts\build\store-azp-variables.ps1
        displayName: "Store AZP Variables"

      - publish: $(Agent.BuildDirectory)/Azp-Variables
        artifact: Azp-Variables
        displayName: "Publish AZP Variables as pipeline artifact"

      - template: set-azp-variables-steps.yml@pipelines-yaml-templates

      - task: VSBuild@1
        displayName: 'Set BranchName, Sha1 and BuildNumber'
        inputs:
          solution: scripts/version/ChangeVersion.proj
          msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId) /p:BuildConfiguration=$(BuildConfiguration)'
          vsVersion: $(vsVersion)

      - task: DownloadSecureFile@1
        displayName: 'Download snk file'
        name: snk
        inputs:
          secureFile: SonarSourceSecret.snk

      - task: DownloadSecureFile@1
        displayName: 'Download pfx file'
        name: pfx
        inputs:
          secureFile: 'SonarSource-2021-2023.pfx'

      - task: VSBuild@1
        displayName: "Build and sign SonarAnalyzer solution"
        env:
          SIGNTOOL_PATH: 'C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.17763.0\\x64\\signtool.exe'
          PFX_PASSWORD: $(pfxPassword2021-2023)
          PFX_PATH: $(pfx.secureFilePath)
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          msbuildArgs: '/p:DeployExtension=false /p:SignAssembly=$(isReleaseBranch) /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)" /p:Sha1=$(Build.SourceVersion) /p:BuildNumber=$(Build.BuildId) /p:WarningLevel=0 /p:BuildOnlyNet46=true'
          vsVersion: $(vsVersion)

      - task: NuGetCommand@2
        displayName: "Build NuGet packages"
        inputs:
          command: pack
          packagesToPack: 'analyzers/src/**/*.nuspec;analyzers/packaging/*.nuspec'
          configuration: '$(BuildConfiguration)'
          packDestination: '$(Build.ArtifactStagingDirectory)/packages'
          verbosityPack: 'Detailed'
          publishPackageMetadata: true

      - task: NuGetCommand@2
        displayName: "Sign NuGet packages"
        condition: eq(variables.isReleaseBranch, 'True')
        inputs:
          command: 'custom'
          arguments: 'sign $(Build.ArtifactStagingDirectory)\packages\*.nupkg -CertificatePath $(pfx.secureFilePath) -CertificatePassword $(pfxPassword2021-2023) -Timestamper http://sha256timestamp.ws.symantec.com/sha256/timestamp'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish NuGet packages as build artifacts'
        inputs:
          pathToPublish: '$(Build.ArtifactStagingDirectory)/packages'
          artifactName: 'NuGet Packages'

      - task: ArtifactoryNuGet@1
        displayName: 'Publish SonarAnalyzer.CFG.CSharp NuGet on repox'
        inputs:
          command: 'push'
          artifactoryService: 'Repox artifactory'
          targetDeployRepo: '$(ARTIFACTORY_NUGET_REPO)'
          pathToNupkg: '$(Build.ArtifactStagingDirectory)/packages/SonarAnalyzer.CFG.CSharp.*.nupkg'

      - task: PublishPipelineArtifact@1
        displayName: 'Publish analyzer binaries as pipeline artifact'
        inputs:
          path: analyzers/packaging/binaries/
          artifact: Binaries

      - task: PublishPipelineArtifact@1
        displayName: 'Publish analyzer test binaries as pipeline artifact'
        inputs:
          path: '$(UnitTestProjectPath)\bin'
          artifact: TestBinaries

- template: stage-with-burgr-notifications.yml@pipelines-yaml-templates
  parameters:
    burgrName: 'qa'
    burgrType: 'qa'
    stageName: 'qa'
    # .NET code analysis, UTs, ITs, build Java and publish SC QG
    stageDisplayName: 'Tests:'
    stageDependencies: build

    jobs:
    - job: runUnitTestsDotNet
      displayName: '.NET UTs'
      workspace:
        clean: all
      strategy:
        matrix:
          Net48:
            FrameworkMoniker: 'net48'
            CoverageArtifactName: 'DotnetCoverageNet48'
            TestResultsArtifactName: 'DotnetTestResultsNet48'
          Net70:
            FrameworkMoniker: 'net7.0'
            CoverageArtifactName: 'DotnetCoverageNet7'
            TestResultsArtifactName: 'DotnetTestResultsNet7'

      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download binaries to test'
        inputs:
          artifact: TestBinaries
          targetPath: '$(UnitTestProjectPath)\bin'

      - powershell: |
          cd analyzers
          & dotnet test -f $(FrameworkMoniker) -c $(BuildConfiguration) -l trx /p:AltCover=true,AltCoverForce=true,AltCoverVisibleBranches=true,AltCoverAssemblyFilter='Moq|Humanizer|AltCover',AltCoverPathFilter='SonarAnalyzer\.CFG\\ShimLayer|SonarAnalyzer\.ShimLayer\.CodeGeneration',AltCoverAttributeFilter='ExcludeFromCodeCoverage',AltCoverReport=coverage/coverage.xml
        displayName: '.Net UTs'

      - task: PublishPipelineArtifact@1
        displayName: 'Save coverage files'
        inputs:
          path: '$(UnitTestProjectPath)\coverage'
          artifact: $(CoverageArtifactName)

      - task: PublishPipelineArtifact@1
        displayName: 'Save test results files'
        inputs:
          path: '$(UnitTestResultsPath)'
          artifact: $(TestResultsArtifactName)

      - task: PublishTestResults@2
        condition: always()
        displayName: 'Publish test results'
        inputs:
          testRunner: VSTest
          testResultsFiles: '*.trx'
          searchFolder: '$(UnitTestResultsPath)'
          testRunTitle: '$(Agent.JobName)'

    - job: dotNetAnalysis
      displayName: '.Net Analysis'
      workspace:
        clean: all
      # This job runs the .Net code analysis and uploads to SonarCloud the test results and coverage reports generated
      # in previous jobs.
      condition: eq(dependencies.runUnitTestsDotNet.result, 'Succeeded')
      dependsOn:
      - runUnitTestsDotNet
      steps:
      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - template: set-azp-variables-steps.yml@pipelines-yaml-templates

      - task: SonarCloudPrepare@1
        displayName: 'Code Analysis - Begin (PR)'
        condition: eq(variables['Build.Reason'], 'PullRequest')
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'MSBuild'
          projectKey: 'sonaranalyzer-dotnet'
          projectName: 'SonarAnalyzer for .NET'
          projectVersion: '$(SONAR_PROJECT_VERSION)'
          extraProperties: |
            sonar.verbose=true
            sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/coverage/**.xml"
            sonar.cs.vstest.reportsPaths="$(Build.SourcesDirectory)/TestResults/*.trx"
            sonar.analysis.buildNumber=$(Build.BuildId)
            sonar.analysis.pipeline=$(Build.BuildId)
            sonar.analysis.sha1=$(System.PullRequest.SourceCommitId)
            sonar.analysis.prNumber=$(System.PullRequest.PullRequestNumber)
            sonar.analysis.repository=$(Build.Repository.ID)

      - task: SonarCloudPrepare@1
        displayName: 'Code Analysis - Begin (master or branch)'
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'MSBuild'
          projectKey: 'sonaranalyzer-dotnet'
          projectName: 'SonarAnalyzer for .NET'
          projectVersion: '$(SONAR_PROJECT_VERSION)'
          extraProperties: |
            sonar.verbose=true
            sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/coverage/**.xml"
            sonar.cs.vstest.reportsPaths="$(Build.SourcesDirectory)/TestResults/*.trx"
            sonar.analysis.buildNumber=$(Build.BuildId)
            sonar.analysis.pipeline=$(Build.BuildId)
            sonar.analysis.sha1=$(Build.SourceVersion)
            sonar.analysis.repository=$(Build.Repository.ID)

      - task: VSBuild@1
        displayName: 'Set BranchName, Sha1 and BuildNumber properties from Azure pipeline variables'
        inputs:
          solution: scripts/version/ChangeVersion.proj
          msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId) /p:BuildConfiguration=$(BuildConfiguration)'
          vsVersion: $(vsVersion)

      - script: '"${{ variables.MsBuildPath }}" /t:restore /p:RestoreLockedMode=true /p:RestoreConfigFile="analyzers\NuGet.Config" $(solution)'
        displayName: "NuGet Restore"

      - task: VSBuild@1
        displayName: "Run .Net code analysis"
        inputs:
          solution: '$(solution)'
          platform: '$(buildPlatform)'
          configuration: '$(buildConfiguration)'
          msbuildArgs: '/p:DeployExtension=false /p:RunAnalyzers=true /p:BuildOnlyNet46=true'
          vsVersion: $(vsVersion)

      - task: DownloadPipelineArtifact@2
        displayName: 'Download coverage reports'
        inputs:
          artifact: DotnetCoverageNet48
          targetPath: 'coverage'

      - task: DownloadPipelineArtifact@2
        displayName: 'Download coverage reports'
        inputs:
          artifact: DotnetCoverageNet7
          targetPath: 'coverage'

      - task: DownloadPipelineArtifact@2
        displayName: 'Download test results'
        inputs:
          artifact: DotnetTestResultsNet48
          targetPath: 'TestResults'

      - task: DownloadPipelineArtifact@2
        displayName: 'Download test results'
        inputs:
          artifact: DotnetTestResultsNet7
          targetPath: 'TestResults'

      - powershell: |
          # Coverage is computed in another job and can have a different base path.
          # We need to normalize content of the coverage files to the current job path.
          # Values generated by the agent can look like this:
          #   `C:\ProgramData\vsts-agent\1\s`
          #   `C:\ProgramData\vsts-agent\2\s`
          function Update-Coverage-BasePaths {
            param (
              $path
            )
            $localPath = (Get-Location).Path
            $pattern = 'C:\\ProgramData\\vsts-agent\\\d+\\s'
            (Get-Content -path $path -Raw) -replace $pattern,$localPath | Set-Content $path
          }

          Update-Coverage-BasePaths 'coverage\coverage.net48.xml'
          Update-Coverage-BasePaths 'coverage\coverage.net7.0.xml'
        displayName: Fix coverage paths

      - task: SonarCloudAnalyze@1
        displayName: 'Code Analysis - End'

      - task: SonarCloudPublish@1
        displayName: 'Code Analysis - Publish QG'
        inputs:
          pollingTimeoutSec: '300'

      - powershell: .\scripts\Mend\Mend-Scan.ps1
        displayName: "Mend scan"
        condition: eq(variables.isReleaseBranch, 'True')
        env:
          WS_PRODUCTNAME: '$(MEND_PRODUCTNAME)'
          WS_APIKEY: '$(MEND_APIKEY)'
          BUILD_NUMBER: '$(Build.BuildId)'
          GIT_SHA: '$(Build.SourceVersion)'

    - job: runIntegrationTestsJob
      displayName: '.NET ITs'
      workspace:
        clean: all
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download binaries to test'
        inputs:
          artifact: Binaries
          targetPath: 'analyzers/packaging/binaries/'

      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - task: PowerShell@2
        displayName: 'Run ITs'
        env:
          SONAR_DOTNET_ENABLE_CONCURRENT_PROCESSING: true
        inputs:
          filePath: 'analyzers/its/regression-test.ps1'
          workingDirectory: 'analyzers/its'

    - job: runJavaBuild
      displayName: 'Java build'
      workspace:
        clean: all
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download .Net binaries for Maven build'
        inputs:
          artifact: Binaries
          targetPath: 'analyzers/packaging/binaries/'

      - template: set-azp-variables-steps.yml@pipelines-yaml-templates

      - task: DownloadSecureFile@1
        displayName: 'Download Maven settings'
        name: mavenSettings
        inputs:
          secureFile: 'maven-settings.xml'

      - task: DownloadSecureFile@1
        displayName: 'Download the sign key'
        name: signKey
        inputs:
          secureFile: 'sign-key.asc'

      - template: update-maven-version-steps.yml
        parameters:
          mavenSettingsFilePath: $(mavenSettings.secureFilePath)

      - task: Maven@3
        displayName: 'Maven deploy'
        env:
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
          PGP_PASSPHRASE: $(PGP_PASSPHRASE)
          GITHUB_BRANCH: $(Build.SourceBranchName)
          GIT_SHA1: $(Build.SourceVersion)
        inputs:
          ${{ if eq(variables.isReleaseBranch, 'True') }}:
            goals: 'deploy -P release,sign'
          ${{ else }}:
            goals: 'deploy -P release'
          options: >-
            $(commonMavenArguments)
            --settings $(mavenSettings.secureFilePath)
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          mavenOptions: $(MAVEN_OPTS)

    - job: runJavaUnitTests
      displayName: 'Java UTs'
      dependsOn: runJavaBuild
      workspace:
        clean: all
      steps:
      - task: DownloadSecureFile@1
        displayName: 'Download Maven settings'
        name: mavenSettings
        inputs:
          secureFile: 'maven-settings.xml'

      - template: set-azp-variables-steps.yml@pipelines-yaml-templates

      - template: update-maven-version-steps.yml
        parameters:
          mavenSettingsFilePath: $(mavenSettings.secureFilePath)

      - task: DownloadPipelineArtifact@2
        displayName: 'Download .Net binaries for Maven build'
        inputs:
          artifact: Binaries
          targetPath: 'analyzers/packaging/binaries/'

      - task: SonarCloudPrepare@1
        displayName: 'Prepare code analysis for Java plugin'
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'Other'

      - task: Maven@3
        displayName: 'Maven verify, UTs with SonarCloud'
        inputs:
          goals: 'verify'
          options: -B --settings $(mavenSettings.secureFilePath) -Pcoverage -Dsonar.projectVersion=$(SONAR_PROJECT_VERSION)
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          testRunTitle: '$(Agent.JobName)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          mavenOptions: $(MAVEN_OPTS)
          sonarQubeRunAnalysis: true
          sqMavenPluginVersionChoice: 'latest'

      - task: SonarCloudPublish@1
        displayName: 'Code Analysis - Publish QG'
        inputs:
          pollingTimeoutSec: '300'

    - job: runJavaIntegrationTests
      displayName: 'Java ITs'
      dependsOn: runJavaBuild
      workspace:
        clean: all
      strategy:
        matrix:
          CSharp:
            testClasses: 'com.sonar.it.csharp.Tests'
          Others:
            testClasses: 'com.sonar.it.vbnet.Tests,com.sonar.it.shared.Tests'
      steps:
      - task: DownloadSecureFile@1
        displayName: 'Download Maven settings'
        name: mavenSettings
        inputs:
          secureFile: 'maven-settings.xml'

      - template: update-maven-version-steps.yml
        parameters:
          mavenSettingsFilePath: $(mavenSettings.secureFilePath)

      - task: DownloadPipelineArtifact@2
        displayName: 'Download .Net binaries for Maven build'
        inputs:
          artifact: Binaries
          targetPath: 'analyzers/packaging/binaries/'

      - template: set-azp-variables-steps.yml@pipelines-yaml-templates

      - task: Maven@3
        displayName: 'Maven install'
        env:
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
        inputs:
          goals: 'clean install'
          options: >-
            $(commonMavenArguments)
            --settings $(mavenSettings.secureFilePath)
            -DskipTests=true
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          mavenOptions: $(MAVEN_OPTS)

      - task: Maven@3
        displayName: 'Maven ITs'
        env:
          ARTIFACTORY_API_KEY: $(ARTIFACTORY_API_KEY)
          GITHUB_TOKEN: $(GITHUB_TOKEN)
        inputs:
          mavenPomFile: its/pom.xml
          goals: 'verify'
          options: -Dtest=$(testClasses) -B --settings $(mavenSettings.secureFilePath)
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          testRunTitle: '$(Agent.JobName)'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.17'
          mavenOptions: $(MAVEN_OPTS)

- stage: promoteNugets
  displayName: Promote NuGet on repox
  dependsOn: qa
  condition: succeeded()
  jobs:
    - job: promoteRepox
      displayName: 'SonarAnalyzer.CFG.CSharp'
      workspace:
        clean: all
      steps:
        - template: set-azp-variables-steps.yml@pipelines-yaml-templates

        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'

        - bash: pip3 install requests

        - task: PythonScript@0
          name: promoteRepox
          inputs:
            failOnStderr: true
            scriptSource: 'inline'
            script: |
              import requests
              import os
              import sys

              version = '$(SONAR_PROJECT_VERSION).$(Build.BuildId)'
              isPr = '$(Build.Reason)' == 'PullRequest'
              sourceRepo = os.environ['ARTIFACTORY_NUGET_REPO']
              targetRepo = None
              if isPr:
                targetRepo = sourceRepo.replace('qa', 'dev')
              else:
                targetRepo = sourceRepo.replace('qa', 'public')

              artifact = f'SonarAnalyzer.CFG.CSharp.{version}.nupkg'
              print(f'Promoting nuget {artifact} from {sourceRepo} to {targetRepo}')

              url = f'$(ARTIFACTORY_URL)/api/move/{sourceRepo}/{artifact}?to=/{targetRepo}/{artifact}'
              headers = {'Content-Type': 'application/json'}
              response = requests.post(url, headers=headers, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))

              fixedBranch = ''
              if not isPr:
                # Cannot use BUILD_SOURCEBRANCHNAME because of https://github.com/Microsoft/azure-pipelines-agent/issues/838
                branch = os.environ['BUILD_SOURCEBRANCH']
                refPrefix = "refs/heads/"
                if branch.startswith(refPrefix):
                  fixedBranch = branch[len(refPrefix):]
              print("##vso[task.setvariable variable=fixedBranch;isOutput=true]" + fixedBranch)

              promoted = response.status_code == 200
              if not promoted:
                print('[!] [{0}] Server Error'.format(response.status_code), file=sys.stderr)

    - job: nugetBurgrFailed
      dependsOn: promoteRepox
      workspace:
        clean: all
      pool: server
      condition: failed()
      steps:
      - template: notify-burgr-steps.yml@pipelines-yaml-templates
        parameters:
          name: 'artifacts'
          type: 'promotion'
          status: 'failed'
          fixedBranch: $(fixedBranch)

    - job: nugetBurgrCanceled
      dependsOn: promoteRepox
      workspace:
        clean: all
      pool: server
      condition: canceled()
      steps:
      - template: notify-burgr-steps.yml@pipelines-yaml-templates
        parameters:
          name: 'artifacts'
          type: 'promotion'
          status: 'canceled'
          fixedBranch: $(fixedBranch)

- template: promote-stage.yml@pipelines-yaml-templates
  parameters:
    stageName: 'Artifacts:'
    stageDependencies:
    - promoteNugets
