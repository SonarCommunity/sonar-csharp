schedules:
- cron: "0 0 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master
  always: true

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  - group: sonar-dotnet-variables
  - group: sonarsource-build-variables

resources:
  repositories:
    - repository: commonTemplates
      type: git
      name: pipelines-yaml-templates
      ref:  refs/tags/v1.0.6

stages:
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'qa'
    burgrType: 'qa'
    stageName: 'qa'
    stageDisplayName: 'Run dotnet analyzers ITs and publish SC QG'

    jobs:
    - job: runUnitTestsJob
      displayName: 'Run dotnet analisys and unit tests'

      steps:
      - task: NuGetToolInstaller@1
        displayName: "Install NuGet"

      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: 5.0.100-preview.6.20318.15
          installationPath: $(Agent.ToolsDirectory)/dotnet
        displayName: "Install NET 5 SDK preview"

      - task: UseDotNet@2
        inputs:
          packageType: sdk
          version: 3.1.201
          installationPath: $(Agent.ToolsDirectory)/dotnet
        displayName: "Install dotnet 3.1 LTS"

      - powershell: |
          dotnet --list-sdks
          dotnet --version
        displayName: 'List dotnet versions and current version'

      - powershell: |
          # Calculate the file path
          $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
          Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."

          # Read the version from the file
          [xml]$versionProps = Get-Content "$versionFilePath"
          $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
          Write-Host "Sonar project version is '${sonarProjectVersion}'"

          # Set the variable to it can be used by other tasks
          Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;]$sonarProjectVersion"
        displayName: 'Read Sonar project version from the versions.props file'

      - task: VSBuild@1
        displayName: 'Set BranchName, Sha1 and BuildNumber properties from Azure pipeline variables'
        inputs:
          solution: scripts/version/ChangeVersion.proj
          msbuildArgs: '/p:Sha1=$(Build.SourceVersion) /p:BranchName=$(Build.SourceBranchName) /p:BuildNumber=$(Build.BuildId) /p:BuildConfiguration=$(BuildConfiguration)'

      - task: SonarCloudPrepare@1
        displayName: 'Run Code Analysis - Begin Step (Pull Request)'
        condition: eq(variables['Build.Reason'], 'PullRequest')
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'MSBuild'
          projectKey: 'sonaranalyzer-dotnet'
          projectName: 'SonarAnalyzer .Net'
          projectVersion: '$(SONAR_PROJECT_VERSION)'
          extraProperties: |
            sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/**/coverage.xml"
            sonar.analysis.buildNumber=$(Build.BuildId)
            sonar.analysis.pipeline=$(Build.BuildId)
            sonar.analysis.sha1=$(System.PullRequest.SourceCommitId)
            sonar.analysis.prNumber=$(System.PullRequest.PullRequestNumber)
            sonar.analysis.repository=$(Build.Repository.ID)

      - task: SonarCloudPrepare@1
        displayName: 'Run Code Analysis - Begin Step (master or branch)'
        condition: ne(variables['Build.Reason'], 'PullRequest')
        inputs:
          SonarCloud: 'SonarCloud'
          organization: 'sonarsource'
          scannerMode: 'MSBuild'
          projectKey: 'sonaranalyzer-dotnet'
          projectName: 'SonarAnalyzer .Net'
          projectVersion: '$(SONAR_PROJECT_VERSION)'
          extraProperties: |
            sonar.cs.opencover.reportsPaths="$(Build.SourcesDirectory)/**/coverage.xml"
            sonar.analysis.buildNumber=$(Build.BuildId)
            sonar.analysis.pipeline=$(Build.BuildId)
            sonar.analysis.sha1=$(Build.SourceVersion)
            sonar.analysis.repository=$(Build.Repository.ID)

      - powershell: |
          cd sonaranalyzer-dotnet

          $testProjFileName = "tests\SonarAnalyzer.UnitTest\SonarAnalyzer.UnitTest.csproj"

          Write-Host "Add .Net 5 target for UnitTest project"
          ((Get-Content -Path $testProjFileName -raw) -Replace "net48;netcoreapp3.1","net48;netcoreapp3.1;net5") | Set-Content -Path $testProjFileName

          Write-Host "Build UnitTest project"
          dotnet build $testProjFileName -c $(BuildConfiguration)

          Write-Host "Run tests on .Net 4.8 and compute coverage"
          $(NUGET_PACKAGES)\opencover\4.7.922\tools\OpenCover.Console.exe -target:"C:/Program Files/dotnet/dotnet.exe" -targetargs:"test tests\SonarAnalyzer.UnitTest\bin\$(BuildConfiguration)\net48\SonarAnalyzer.UnitTest.dll" -returntargetcode -filter:"+[SonarAnalyzer.CFG]* +[SonarAnalyzer]* +[SonarAnalyzer.CSharp]* +[SonarAnalyzer.Utilities]* +[SonarAnalyzer.VisualBasic]*" -output:tests\coverage.xml -oldStyle -register:Path32

          Write-Host "Run tests on .Net Core 3.1"
          dotnet test $testProjFileName -c $(BuildConfiguration) --no-build --no-restore --nologo -f netcoreapp3.1

          Write-Host "Run tests on .Net 5"
          dotnet test $testProjFileName -c $(BuildConfiguration) --no-build --no-restore --nologo -f net5

          cd ..
        displayName: 'Run .Net unit tests'

      - task: SonarCloudAnalyze@1
        displayName: 'Run Code Analysis - End Step'

      - task: SonarCloudPublish@1
        displayName: 'Run Code Analysis - Publish QG'
        inputs:
          pollingTimeoutSec: '300'
