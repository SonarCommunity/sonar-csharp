<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Targets to download the CBDE binaries if required. 
  
       The files will be downloaded automatically if they are not found locally.
       
       To force the files to be downloaded even if they exist, set the build property "UpdateCBDE" to true.
  
  -->
  
  <PropertyGroup>
    <CBDEDownloadUrl>http://repox.jfrog.io/repox/sonarsource-public-builds/org/sonarsource/cbde/windows/cbde-windows.zip</CBDEDownloadUrl>
    <CBDEFolder>$(MSBuildProjectDirectory)\CBDE\windows\</CBDEFolder>
  </PropertyGroup>

  <!-- Specifies the CBDE files that should be included in the project and copied to the output directory -->
  <ItemGroup>
    <Content Include="$(CBDEFolder)\**\*.exe" >
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="$(CBDEFolder)\**\*.txt" >
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <Target Name="FetchCBDEBinaries" BeforeTargets="Build" >
    <PropertyGroup>
      <CBDEFilesExist>$([System.IO.File]::Exists('$(CBDEFolder)dotnet-symbolic-execution.exe'))</CBDEFilesExist>
      <ShouldDownloadCBDE>$(UpdateCBDE)</ShouldDownloadCBDE>
      <ShouldDownloadCBDE Condition="$(ShouldDownloadCBDE)=='' AND $(CBDEFilesExist)=='false'">true</ShouldDownloadCBDE>
    </PropertyGroup>

    <Message Importance="high" Text="CBDE: binaries exist? $(CBDEFilesExist)" />
    <Message Importance="high" Text="CBDE: Updating CBDE binaries" Condition="$(UpdateCBDE)=='true'" />

    <CallTarget Targets="DownloadFromRepox" Condition="$(ShouldDownloadCBDE)=='true'" />    
  </Target>

  <Target Name="DownloadFromRepox">
    
    <Message Importance="high" Text="CBDE: Deleting any existing files..." />

    <ItemGroup>
      <ExistingCBDEFiles Include="$(CBDEFolder)\*.*" />
    </ItemGroup>
    <Delete Files="@(ExistingCBDEFiles)" />

    <Message Importance="high" Text="CBDE: Begin downloading CBDE zip..." />
    <DownloadFile SourceUrl="$(CBDEDownloadUrl)" DestinationFolder="$(CBDEFolder)" >
      <Output PropertyName="CBDEZipFilePath" TaskParameter="DownloadedFile" />
    </DownloadFile>
    <Message Importance="high" Text="CBDE: Finished downloading CBDE binaries: $(CBDEZipFilePath)" />

    <Message Importance="high" Text="CBDE: Unzipping the CBDE binaries..." />
    <Unzip SourceFiles="$(CBDEZipFilePath)" DestinationFolder="$(CBDEFolder)" />
    <Message Importance="high" Text="CBDE: Finished unzipping CBDE binaries" />

  </Target>

  <!--<ItemGroup>
    <None Include="$(CBDEFolder)\*.exe" />
    <None Include="$(CBDEFolder)\*.txt" />
  </ItemGroup>-->

  <!-- Packaging Logic -->
  <!-- NOTE: there is a built-in DownloadFile task in MSBuild 15.8. 
       However, the cix slaves have an earlier version installed.
       https://docs.microsoft.com/en-us/visualstudio/msbuild/downloadfile-task?view=vs-2019 -->
  <UsingTask TaskName="DownloadFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <SourceUrl ParameterType="System.String" Required="true" />
      <DestinationFolder ParameterType="System.String" Required="false" />
      <DownloadedFile ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Web" />
      <Using Namespace="System.Net" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
    using (var client = new System.Net.WebClient())
    {
        var directory = DestinationFolder != null ? DestinationFolder + "/" : "";
        if (!System.IO.Directory.Exists(directory))
        {
          System.IO.Directory.CreateDirectory(directory);
        }
        
        var fileName = System.IO.Path.GetFileName(new Uri(SourceUrl).LocalPath);
        var fullPath = System.IO.Path.Combine(DestinationFolder, fileName);
        client.DownloadFile(SourceUrl, fullPath);
        DownloadedFile = fullPath;
    }
        ]]>
      </Code>
    </Task>
  </UsingTask>


  <!-- There are MS-supplied Unzip and ZipDirectory tasks, but they are only available in MSBuild 15.8 or above.
       See https://docs.microsoft.com/en-us/visualstudio/msbuild/unzip-task?view=vs-2017
       and https://docs.microsoft.com/en-us/visualstudio/msbuild/zipdirectory-task?view=vs-2017 -->
  <UsingTask TaskName="Unzip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <SourceFiles ParameterType="System.String" Required="true" />
      <DestinationFolder ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[    
    System.IO.Compression.ZipFile.ExtractToDirectory(SourceFiles, DestinationFolder);
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>