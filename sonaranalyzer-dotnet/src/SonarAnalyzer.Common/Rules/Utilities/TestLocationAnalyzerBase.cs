/*
 * SonarAnalyzer for .NET
 * Copyright (C) 2015-2018 SonarSource SA
 * mailto: contact AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using Microsoft.CodeAnalysis;
using SonarAnalyzer.Helpers;
using SonarAnalyzer.Protobuf;

namespace SonarAnalyzer.Rules
{
    public abstract class TestLocationAnalyzerBase : UtilityAnalyzerBase<TestLocation>
    {
        private const string DiagnosticId = "S9999-test-location";
        private const string Title = "Test location collector";

        private static readonly DiagnosticDescriptor rule =
            DiagnosticDescriptorBuilder.GetUtilityDescriptor(DiagnosticId, Title);

        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get; } =
            ImmutableArray.Create(rule);

        protected override string FileName => "test-location.pb";

        protected sealed override bool AnalyzeAutogeneratedCode => true;

        protected sealed override GeneratedCodeRecognizer GeneratedCodeRecognizer =>
            throw new NotSupportedException($"This analyzer should run on all code, set {nameof(AnalyzeAutogeneratedCode)} to true.");

        protected abstract IEnumerable<INamedTypeSymbol> GetNamedTypes(SyntaxTree syntaxTree, SemanticModel semanticModel);

        protected override TestLocation GetMessage(SyntaxTree syntaxTree, SemanticModel semanticModel)
        {
            var testLocation = new TestLocation
            {
                FilePath = syntaxTree.FilePath,
            };

            var testNames = GetNamedTypes(syntaxTree, semanticModel)
                .SelectMany(GetTestNames);
            testLocation.TestNames.AddRange(testNames);

            return testLocation;
        }

        private IEnumerable<string> GetTestNames(INamedTypeSymbol typeSymbol)
        {
            if (typeSymbol.IsAbstract)
            {
                return Enumerable.Empty<string>();
            }

            var typeName = typeSymbol.ToDisplayString();

            return typeSymbol.GetSelfAndBaseTypes()
                .SelectMany(GetTestMethods)
                .Select(GetTestName);

            string GetTestName(IMethodSymbol methodSymbol) =>
                $"{typeName}.{methodSymbol.Name}";
        }

        private static IEnumerable<IMethodSymbol> GetTestMethods(INamedTypeSymbol typeSymbol) =>
            typeSymbol.GetMembers()
                .OfType<IMethodSymbol>()
                .Where(methodSymbol => !methodSymbol.IsAbstract)
                .Where(UnitTestHelper.IsTestMethod);
    }
}
