S101_Category=Sonar Code Smell
S101_Description=Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.
S101_IsActivatedByDefault=True
S101_Remediation=Constant/Issue
S101_RemediationCost=5min
S101_Severity=Minor
S101_Tags=convention
S101_Title=Class names should comply with a naming convention
S101_Type=CODE_SMELL
S103_Category=Sonar Code Smell
S103_Description=Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.
S103_IsActivatedByDefault=False
S103_Remediation=Constant/Issue
S103_RemediationCost=1min
S103_Severity=Major
S103_Tags=convention
S103_Title=Lines should not be too long
S103_Type=CODE_SMELL
S104_Category=Sonar Code Smell
S104_Description=A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those smaller files will not only be easier to understand but also probably easier to test.
S104_IsActivatedByDefault=False
S104_Remediation=Constant/Issue
S104_RemediationCost=1h
S104_Severity=Major
S104_Tags=brain-overload
S104_Title=Files should not have too many lines of code
S104_Type=CODE_SMELL
S105_Category=Sonar Code Smell
S105_Description=Developers should not need to configure the tab width of their text editors in order to be able to read source code.
S105_IsActivatedByDefault=False
S105_Remediation=Constant/Issue
S105_RemediationCost=2min
S105_Severity=Minor
S105_Tags=convention
S105_Title=Tabulation characters should not be used
S105_Type=CODE_SMELL
S1067_Category=Sonar Code Smell
S1067_Description=Complex boolean expressions are hard to read and so to maintain.
S1067_IsActivatedByDefault=False
S1067_Remediation=Constant/Issue
S1067_RemediationCost=3min
S1067_Severity=Critical
S1067_Tags=brain-overload
S1067_Title=Expressions should not be too complex
S1067_Type=CODE_SMELL
S112_Category=Sonar Code Smell
S112_Description=Throwing such general exceptions as Exception, SystemException, ApplicationException, IndexOutOfRangeException, NullReferenceException, OutOfMemoryException and ExecutionEngineException prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. 
S112_IsActivatedByDefault=True
S112_Remediation=Constant/Issue
S112_RemediationCost=20min
S112_Severity=Major
S112_Tags=cwe,error-handling,cert
S112_Title=General exceptions should never be thrown
S112_Type=CODE_SMELL
S114_Category=Sonar Code Smell
S114_Description=Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.
S114_IsActivatedByDefault=True
S114_Remediation=Constant/Issue
S114_RemediationCost=10min
S114_Severity=Minor
S114_Tags=convention
S114_Title=Interface names should comply with a naming convention
S114_Type=CODE_SMELL
S1147_Category=Sonar Code Smell
S1147_Description=End statements exit the control flow of the program in an unstructured way. This statement stops code execution immediately without executing Dispose or Finalize methods, or executing Finally blocks. Therefore, it should be avoided.
S1147_IsActivatedByDefault=False
S1147_Remediation=Constant/Issue
S1147_RemediationCost=30min
S1147_Severity=Blocker
S1147_Tags=cwe,cert,suspicious
S1147_Title="End" statements should not be used
S1147_Type=CODE_SMELL
S117_Category=Sonar Code Smell
S117_Description=Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.This rule checks that all local variables follow a naming convention.
S117_IsActivatedByDefault=True
S117_Remediation=Constant/Issue
S117_RemediationCost=2min
S117_Severity=Minor
S117_Tags=convention
S117_Title=Local variable names should comply with a naming convention
S117_Type=CODE_SMELL
S1197_Category=Sonar Code Smell
S1197_Description=Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the variable name to know whether or not a variable is an array.
S1197_IsActivatedByDefault=True
S1197_Remediation=Constant/Issue
S1197_RemediationCost=5min
S1197_Severity=Minor
S1197_Tags=convention
S1197_Title=Array designators "()" should be on the type, not the variable
S1197_Type=CODE_SMELL
S122_Category=Sonar Code Smell
S122_Description=For better readability, do not put more than one statement on a single line.
S122_IsActivatedByDefault=False
S122_Remediation=Constant/Issue
S122_RemediationCost=1min
S122_Severity=Major
S122_Tags=style
S122_Title=Statements should be on separate lines
S122_Type=CODE_SMELL
S1226_Category=Sonar Code Smell
S1226_Description=While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.
S1226_IsActivatedByDefault=False
S1226_Remediation=Constant/Issue
S1226_RemediationCost=5min
S1226_Severity=Minor
S1226_Tags=misra,pitfall
S1226_Title=Method parameters and caught exceptions should not be reassigned
S1226_Type=CODE_SMELL
S131_Category=Sonar Code Smell
S131_Description=The requirement for a final Case Else clause is defensive programming.
S131_IsActivatedByDefault=False
S131_Remediation=Constant/Issue
S131_RemediationCost=5min
S131_Severity=Critical
S131_Tags=cwe,misra,cert
S131_Title="Select" statements should end with a "Case Else" clause
S131_Type=CODE_SMELL
S134_Category=Sonar Code Smell
S134_Description=Nested If, Select, For, For Each, While, Do, and Try statements are key ingredients for making what's known as "Spaghetti code".
S134_IsActivatedByDefault=False
S134_Remediation=Constant/Issue
S134_RemediationCost=10min
S134_Severity=Critical
S134_Tags=brain-overload
S134_Title=Control flow statements "If", "For", "For Each", "Do", "While", "Select" and "Try" should not be nested too deeply
S134_Type=CODE_SMELL
S139_Category=Sonar Code Smell
S139_Description=This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.
S139_IsActivatedByDefault=False
S139_Remediation=Constant/Issue
S139_RemediationCost=1min
S139_Severity=Minor
S139_Tags=convention
S139_Title=Comments should not be located at the end of lines of code
S139_Type=CODE_SMELL
S1541_Category=Sonar Code Smell
S1541_Description=The cyclomatic complexity of a function, procedure or property should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.
S1541_IsActivatedByDefault=False
S1541_Remediation=Constant/Issue
S1541_RemediationCost=10min
S1541_Severity=Critical
S1541_Tags=brain-overload
S1541_Title=Functions, procedures and properties should not be too complex
S1541_Type=CODE_SMELL
S1542_Category=Sonar Code Smell
S1542_Description=Shared naming conventions allow teams to collaborate efficiently. This rule checks that all subroutine and function names match a provided regular expression.
S1542_IsActivatedByDefault=True
S1542_Remediation=Constant/Issue
S1542_RemediationCost=10min
S1542_Severity=Major
S1542_Tags=convention
S1542_Title=Functions and procedures should comply with a naming convention
S1542_Type=CODE_SMELL
S1643_Category=Sonar Code Smell
S1643_Description=StringBuilder is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.
S1643_IsActivatedByDefault=True
S1643_Remediation=Constant/Issue
S1643_RemediationCost=10min
S1643_Severity=Minor
S1643_Tags=performance
S1643_Title=Strings should not be concatenated using "+" or "&" in a loop
S1643_Type=CODE_SMELL
S1645_Category=Sonar Code Smell
S1645_Description=Consistently using the & operator for string concatenation make the developer intentions clear.
S1645_IsActivatedByDefault=True
S1645_Remediation=Constant/Issue
S1645_RemediationCost=2min
S1645_Severity=Critical
S1645_Tags=suspicious
S1645_Title=The "&" operator should be used to concatenate strings
S1645_Type=CODE_SMELL
S1654_Category=Sonar Code Smell
S1654_Description=Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.
S1654_IsActivatedByDefault=True
S1654_Remediation=Constant/Issue
S1654_RemediationCost=5min
S1654_Severity=Major
S1654_Tags=convention
S1654_Title=Method parameters should follow a naming convention
S1654_Type=CODE_SMELL
S1656_Category=Sonar Bug
S1656_Description=There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.
S1656_IsActivatedByDefault=True
S1656_Remediation=Constant/Issue
S1656_RemediationCost=3min
S1656_Severity=Major
S1656_Tags=cert
S1656_Title=Variables should not be self-assigned
S1656_Type=BUG
S1659_Category=Sonar Code Smell
S1659_Description=Declaring multiple variable on one line is difficult to read.
S1659_IsActivatedByDefault=False
S1659_Remediation=Constant/Issue
S1659_RemediationCost=2min
S1659_Severity=Minor
S1659_Tags=convention,misra,cert
S1659_Title=Multiple variables should not be declared on the same line
S1659_Type=CODE_SMELL
S1764_Category=Sonar Bug
S1764_Description=Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.
S1764_IsActivatedByDefault=True
S1764_Remediation=Constant/Issue
S1764_RemediationCost=2min
S1764_Severity=Major
S1764_Tags=cert
S1764_Title=Identical expressions should not be used on both sides of a binary operator
S1764_Type=BUG
S1862_Category=Sonar Bug
S1862_Description=A chain of If/ElseIf statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to True.
S1862_IsActivatedByDefault=True
S1862_Remediation=Constant/Issue
S1862_RemediationCost=10min
S1862_Severity=Major
S1862_Tags=cert,unused,pitfall
S1862_Title=Related "If/ElseIf" statements should not have the same condition
S1862_Type=BUG
S1871_Category=Sonar Code Smell
S1871_Description=Having two Cases in the same Select statement or branches in the same If structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an If structure they should be combined, or for a Select, one should fall through to the other.
S1871_IsActivatedByDefault=True
S1871_Remediation=Constant/Issue
S1871_RemediationCost=10min
S1871_Severity=Major
S1871_Tags=design,suspicious
S1871_Title=Two branches in a conditional structure should not have exactly the same implementation
S1871_Type=CODE_SMELL
S2178_Category=Sonar Code Smell
S2178_Description=The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances.
S2178_IsActivatedByDefault=True
S2178_Remediation=Constant/Issue
S2178_RemediationCost=5min
S2178_Severity=Blocker
S2178_Tags=cert
S2178_Title=Short-circuit logic should be used in boolean contexts
S2178_Type=CODE_SMELL
S2304_Category=Sonar Code Smell
S2304_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all namespace names match a provided regular expression.
S2304_IsActivatedByDefault=True
S2304_Remediation=Constant/Issue
S2304_RemediationCost=10min
S2304_Severity=Minor
S2304_Tags=convention
S2304_Title=Namespace names should comply with a naming convention
S2304_Type=CODE_SMELL
S2339_Category=Sonar Code Smell
S2339_Description=Constant members are copied at compile time to the call sites, instead of being fetched at runtime.
S2339_IsActivatedByDefault=False
S2339_Remediation=Constant/Issue
S2339_RemediationCost=5min
S2339_Severity=Critical
S2339_Tags=pitfall
S2339_Title=Public constant members should not be used
S2339_Type=CODE_SMELL
S2340_Category=Sonar Code Smell
S2340_Description=A Do ... Loop without a While or Until condition must be terminated by an unstructured Exit Do statement. It is safer and more readable to use structured loops instead.
S2340_IsActivatedByDefault=True
S2340_Remediation=Constant/Issue
S2340_RemediationCost=20min
S2340_Severity=Critical
S2340_Tags=pitfall
S2340_Title="Do" loops should not be used without a "While" or "Until" condition
S2340_Type=CODE_SMELL
S2342_Category=Sonar Code Smell
S2342_Description=Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.
S2342_IsActivatedByDefault=True
S2342_Remediation=Constant/Issue
S2342_RemediationCost=5min
S2342_Severity=Minor
S2342_Tags=convention
S2342_Title=Enumeration types should comply with a naming convention
S2342_Type=CODE_SMELL
S2343_Category=Sonar Code Smell
S2343_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all enumeration value names match a provided regular expression.
S2343_IsActivatedByDefault=False
S2343_Remediation=Constant/Issue
S2343_RemediationCost=5min
S2343_Severity=Minor
S2343_Tags=convention
S2343_Title=Enumeration values should comply with a naming convention
S2343_Type=CODE_SMELL
S2344_Category=Sonar Code Smell
S2344_Description=The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.
S2344_IsActivatedByDefault=True
S2344_Remediation=Constant/Issue
S2344_RemediationCost=5min
S2344_Severity=Minor
S2344_Tags=convention
S2344_Title=Enumeration type names should not have "Flags" or "Enum" suffixes
S2344_Type=CODE_SMELL
S2345_Category=Sonar Bug
S2345_Description=Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does not allow members to be combined using the bitwise or operator in a useful way.
S2345_IsActivatedByDefault=True
S2345_Remediation=Constant/Issue
S2345_RemediationCost=5min
S2345_Severity=Minor
S2345_Tags=
S2345_Title=Flags enumerations should explicitly initialize all their members
S2345_Type=BUG
S2346_Category=Sonar Code Smell
S2346_Description=Consistent use of "None" in flags enumerations indicates that all flag values are cleared. The value 0 should not be used to indicate any other state, since there is no way to check that the bit 0 is set.
S2346_IsActivatedByDefault=True
S2346_Remediation=Constant/Issue
S2346_RemediationCost=5min
S2346_Severity=Critical
S2346_Tags=convention
S2346_Title=Flags enumerations zero-value members should be named "None"
S2346_Type=CODE_SMELL
S2347_Category=Sonar Code Smell
S2347_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even handler names match a provided regular expression.
S2347_IsActivatedByDefault=True
S2347_Remediation=Constant/Issue
S2347_RemediationCost=5min
S2347_Severity=Minor
S2347_Tags=convention
S2347_Title=Event handlers should comply with a naming convention
S2347_Type=CODE_SMELL
S2348_Category=Sonar Code Smell
S2348_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all even names match a provided regular expression.
S2348_IsActivatedByDefault=False
S2348_Remediation=Constant/Issue
S2348_RemediationCost=5min
S2348_Severity=Minor
S2348_Tags=convention
S2348_Title=Events should comply with a naming convention
S2348_Type=CODE_SMELL
S2349_Category=Sonar Code Smell
S2349_Description="After" and "Before" prefixes or suffixes should not be used to indicate pre and post events. The concepts of before and after should be given to events using the present and past tense.
S2349_IsActivatedByDefault=True
S2349_Remediation=Constant/Issue
S2349_RemediationCost=5min
S2349_Severity=Minor
S2349_Tags=convention
S2349_Title=Event names should not have "Before" or "After" as a prefix or suffix
S2349_Type=CODE_SMELL
S2352_Category=Sonar Code Smell
S2352_Description=Indexed properties are meant to represent access to a logical collection. When multiple parameters are required, this design guideline may be violated, and refactoring the property into a method is preferable.
S2352_IsActivatedByDefault=True
S2352_Remediation=Constant/Issue
S2352_RemediationCost=20min
S2352_Severity=Major
S2352_Tags=clumsy
S2352_Title=Indexed properties with more than one parameter should not be used
S2352_Type=CODE_SMELL
S2353_Category=Sonar Code Smell
S2353_Description=In most cases, indexed properties should be named Item for consistency. Exceptions are when there exists a name which is obviously better, for example System.String.Chars(System.Int32).
S2353_IsActivatedByDefault=False
S2353_Remediation=Constant/Issue
S2353_RemediationCost=5min
S2353_Severity=Minor
S2353_Tags=
S2353_Title=Indexed properties should be named "Item"
S2353_Type=CODE_SMELL
S2354_Category=Sonar Code Smell
S2354_Description=To improve the code readability, the explicit line continuation character, _, should not be used. Instead, it is better to break lines after an operator.
S2354_IsActivatedByDefault=False
S2354_Remediation=Constant/Issue
S2354_RemediationCost=2min
S2354_Severity=Minor
S2354_Tags=convention
S2354_Title=Line continuations should not be used
S2354_Type=CODE_SMELL
S2355_Category=Sonar Code Smell
S2355_Description=Array literals are more compact than array creation expressions.
S2355_IsActivatedByDefault=True
S2355_Remediation=Constant/Issue
S2355_RemediationCost=2min
S2355_Severity=Minor
S2355_Tags=clumsy
S2355_Title=Array literals should be used instead of array creation expressions
S2355_Type=CODE_SMELL
S2357_Category=Sonar Code Smell
S2357_Description=Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and validation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties. Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.
S2357_IsActivatedByDefault=False
S2357_Remediation=Constant/Issue
S2357_RemediationCost=30min
S2357_Severity=Major
S2357_Tags=pitfall
S2357_Title=Fields should be private
S2357_Type=CODE_SMELL
S2358_Category=Sonar Code Smell
S2358_Description=The ... IsNot ... syntax is more compact and more readable than the Not ... Is ... syntax.
S2358_IsActivatedByDefault=True
S2358_Remediation=Constant/Issue
S2358_RemediationCost=5min
S2358_Severity=Major
S2358_Tags=clumsy
S2358_Title="IsNot" should be used instead of "Not ... Is ..."
S2358_Type=CODE_SMELL
S2359_Category=Sonar Code Smell
S2359_Description=Prefer the use of Try ... Catch blocks instead of On Error statements.
S2359_IsActivatedByDefault=True
S2359_Remediation=Constant/Issue
S2359_RemediationCost=15min
S2359_Severity=Major
S2359_Tags=bad-practice
S2359_Title="On Error" statements should not be used
S2359_Type=CODE_SMELL
S2360_Category=Sonar Code Smell
S2360_Description=The overloading mechanism should be used in place of optional parameters for several reasons:
S2360_IsActivatedByDefault=False
S2360_Remediation=Constant/Issue
S2360_RemediationCost=5min
S2360_Severity=Critical
S2360_Tags=pitfall
S2360_Title=Optional parameters should not be used
S2360_Type=CODE_SMELL
S2362_Category=Sonar Code Smell
S2362_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all Private Const field names comply with the provided regular expression.
S2362_IsActivatedByDefault=False
S2362_Remediation=Constant/Issue
S2362_RemediationCost=5min
S2362_Severity=Minor
S2362_Tags=convention
S2362_Title=Private constants should comply with a naming convention
S2362_Type=CODE_SMELL
S2363_Category=Sonar Code Smell
S2363_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all Private Shared ReadOnly field names comply with the provided regular expression.
S2363_IsActivatedByDefault=False
S2363_Remediation=Constant/Issue
S2363_RemediationCost=5min
S2363_Severity=Minor
S2363_Tags=convention
S2363_Title="Private Shared ReadOnly" fields should comply with a naming convention
S2363_Type=CODE_SMELL
S2364_Category=Sonar Code Smell
S2364_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all Private field names match the provided regular expression.
S2364_IsActivatedByDefault=False
S2364_Remediation=Constant/Issue
S2364_RemediationCost=5min
S2364_Severity=Minor
S2364_Tags=convention
S2364_Title="Private" fields should comply with a naming convention
S2364_Type=CODE_SMELL
S2365_Category=Sonar Code Smell
S2365_Description=Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will be much slower than a simple field access, contrary to the caller's likely expectations. Therefore, such properties should be refactored into methods so that callers are not surprised by unexpectedly poor performance.
S2365_IsActivatedByDefault=True
S2365_Remediation=Constant/Issue
S2365_RemediationCost=5min
S2365_Severity=Critical
S2365_Tags=api-design,performance
S2365_Title=Properties should not make collection or array copies
S2365_Type=CODE_SMELL
S2366_Category=Sonar Code Smell
S2366_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that property names match a provided regular expression.
S2366_IsActivatedByDefault=False
S2366_Remediation=Constant/Issue
S2366_RemediationCost=5min
S2366_Severity=Minor
S2366_Tags=convention
S2366_Title=Properties should comply with a naming convention
S2366_Type=CODE_SMELL
S2367_Category=Sonar Code Smell
S2367_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private Const field names comply with the provided regular expression.
S2367_IsActivatedByDefault=False
S2367_Remediation=Constant/Issue
S2367_RemediationCost=5min
S2367_Severity=Minor
S2367_Tags=convention
S2367_Title=Non-private constants should comply with a naming convention
S2367_Type=CODE_SMELL
S2368_Category=Sonar Code Smell
S2368_Description=Exposing methods with multidimensional array parameters requires developers to have advanced knowledge about the language in order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods should not be exposed, but can be used internally.
S2368_IsActivatedByDefault=True
S2368_Remediation=Constant/Issue
S2368_RemediationCost=1h
S2368_Severity=Blocker
S2368_Tags=pitfall
S2368_Title=Public methods should not have multidimensional array parameters
S2368_Type=CODE_SMELL
S2369_Category=Sonar Code Smell
S2369_Description=Shared coding conventions allow teams to collaborate efficiently. This rule checks that all non-private fields names match a provided regular expression. 
S2369_IsActivatedByDefault=False
S2369_Remediation=Constant/Issue
S2369_RemediationCost=5min
S2369_Severity=Minor
S2369_Tags=convention
S2369_Title=Non-private fields should comply with a naming convention
S2369_Type=CODE_SMELL
S2370_Category=Sonar Code Smell
S2370_Description=Shared naming conventions allow teams to collaborate efficiently. This rule checks that all non-private Shared ReadOnly fields names match a provided regular expression.
S2370_IsActivatedByDefault=False
S2370_Remediation=Constant/Issue
S2370_RemediationCost=5min
S2370_Severity=Minor
S2370_Tags=convention
S2370_Title=Non-private "Shared ReadOnly" fields should comply with a naming convention
S2370_Type=CODE_SMELL
S2372_Category=Sonar Code Smell
S2372_Description=Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method. 
S2372_IsActivatedByDefault=True
S2372_Remediation=Constant/Issue
S2372_RemediationCost=20min
S2372_Severity=Major
S2372_Tags=error-handling
S2372_Title=Exceptions should not be thrown from property getters
S2372_Type=CODE_SMELL
S2373_Category=Sonar Code Smell
S2373_Description=Shared naming conventions allow teams to collaborate efficiently. This rule checks that all generic type parameter names match a provided regular expression.
S2373_IsActivatedByDefault=False
S2373_Remediation=Constant/Issue
S2373_RemediationCost=5min
S2373_Severity=Minor
S2373_Tags=convention
S2373_Title=Generic type parameter names should comply with a naming convention
S2373_Type=CODE_SMELL
S2374_Category=Sonar Code Smell
S2374_Description=Unsigned integers have different arithmetic operators than signed ones - operators that few developers understand. Therefore, signed types should be preferred where possible.
S2374_IsActivatedByDefault=False
S2374_Remediation=Constant/Issue
S2374_RemediationCost=20min
S2374_Severity=Critical
S2374_Tags=pitfall
S2374_Title=Signed types should be preferred to unsigned ones
S2374_Type=CODE_SMELL
S2375_Category=Sonar Code Smell
S2375_Description=Using the With statement for a series of calls to the same object makes the code more readable.
S2375_IsActivatedByDefault=True
S2375_Remediation=Constant/Issue
S2375_RemediationCost=5min
S2375_Severity=Minor
S2375_Tags=clumsy
S2375_Title="With" statements should be used for a series of calls to the same object
S2375_Type=CODE_SMELL
S2376_Category=Sonar Code Smell
S2376_Description=Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be replaced with a setter method.
S2376_IsActivatedByDefault=True
S2376_Remediation=Constant/Issue
S2376_RemediationCost=20min
S2376_Severity=Major
S2376_Tags=pitfall
S2376_Title=Write-only properties should not be used
S2376_Type=CODE_SMELL
S2429_Category=Sonar Code Smell
S2429_Description=The ... = {} syntax is more compact, more readable and less error-prone.
S2429_IsActivatedByDefault=False
S2429_Remediation=Constant/Issue
S2429_RemediationCost=5min
S2429_Severity=Minor
S2429_Tags=clumsy
S2429_Title=Arrays should be initialized using the "... = {}" syntax
S2429_Type=CODE_SMELL
S2951_Category=Sonar Code Smell
S2951_Description=Visual Basic .NET, unlike many other programming languages, has no "fall-through" for its Select cases. Each case already has an implicit Exit Select as its last instruction. It therefore is redundant to explicitly add one.
S2951_IsActivatedByDefault=True
S2951_Remediation=Constant/Issue
S2951_RemediationCost=2min
S2951_Severity=Minor
S2951_Tags=unused,clumsy
S2951_Title=VB.Net: "Exit Select" statements should not be used redundantly
S2951_Type=CODE_SMELL
S3385_Category=Sonar Code Smell
S3385_Description=Other than Exit Select, using an Exit statement is never a good idea.
S3385_IsActivatedByDefault=True
S3385_Remediation=Constant/Issue
S3385_RemediationCost=5min
S3385_Severity=Major
S3385_Tags=brain-overload,bad-practice
S3385_Title="Exit" statements should not be used
S3385_Type=CODE_SMELL
